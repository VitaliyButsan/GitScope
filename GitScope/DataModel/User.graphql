

# repository QL struct
query GetRepoQL($name: String!, $owner: String!) {
    repository(name: $name, owner: $owner) {
        name
        createdAt
    }
    
}

# user QL struct
query GetUserQL($login: String!) {
    user(login: $login) {
        login
        company
        repositories(first: 3) {
            nodes {
                name
                createdAt
            },
            totalDiskUsage
        },
        avatarUrl
    }
    
}

# organization QL struct
query GetGitOrgQL($withName: String!) {
    organization(login: $withName) {
        name
        url
    }
}

query CallsLimitStatusQL {
    rateLimit {
        cost
        limit
        nodeCount
        remaining
        resetAt
    }
}

# -----------------------------------------------------------------
query SearchUsersQL($withName: String!) {
    search(first: 20, query: $withName, type: USER) {
        nodes {
            ... UserDetail
        }
    }
}

fragment UserDetail on User {
    avatarUrl
    company
    createdAt
    login
    repositories {
        totalCount
    }
    
} # -----------------------------------------------------------------


#starredRepositories {
#    nodes {
#
#    }
#}

# -----------------------------------------------------------------
query SearchReposQL($withName: String!) {
    search(first: 20, query: $withName, type: REPOSITORY) {
        #repositoryCount
        nodes {
            ...RepositoryDetail
        }
    }
}

fragment RepositoryDetail on Repository {
    createdAt
    isPrivate
    name
    nameWithOwner
    assignableUsers(first: 0) {
        totalCount
    },
    collaborators {
        totalCount
    },
    commitComments {
        totalCount
    },
    mentionableUsers {
        totalCount
    },
    owner {
        login
        avatarUrl
    },
    primaryLanguage {
        name
    },
    stargazers {
        totalCount
    },
    watchers {
        totalCount
    }
} # ---------------------------------------------------------------
